# vim: ft=sh
mkdircd() {
  mkdir "$1" && cd "$1" || exit
}

testing123testing() {
  echo "$0" && echo "$1"
}

apps-propos() {
  apropos --sections=1,1p "$1"
}

apropos-soft() {
  apropos --sections=1,1p,4,5,6,7,8 "$1"
}

apropos-dev() {
  apropos --sections=0,2,3,3p "$1"
}

apropos-posix() {
  apropos --sections=0,1p,2,3p "$1"
}

apropos-misc() {
  apropos --sections=4,5,6,7,8 "$1"
}

# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-nvim} "${files[@]}"
}

# Run command/application and choose paths/files with fzf.
# Always return control of the terminal to user (e.g. when opening GUIs).
# The full command that was used will appear in your history just like any
# other (N.B. to achieve this I write the shell's active history to
# ~/.bash_history)
#
# Usage:
# f cd (hit enter, choose path)
# f cat (hit enter, choose files)
# f vim (hit enter, choose files)
# f vlc (hit enter, choose files)

fx() {
  # Store the arguments from fzf
  IFS=$'\n' arguments=($(fzf --query="$2" --multi))

  # If no arguments passed (e.g. if Esc pressed), return to terminal
  if [ -z "${arguments}" ]; then
    return 1
  fi

  # We want the command to show up in our bash history, so write the shell's
  # active history to ~/.bash_history. Then we'll also add the command from
  # fzf, then we'll load it all back into the shell's active history
  history -w

  # RUN THE COMMANDS ########################################################
  # The cd command has no effect when run as background, and doesn't show up
  # as a job the can be brought to the foreground. So we make sure not to add
  # a '&' (more programs can be added separated by a '|')
  if ! [[ $1 =~ ^(cd)$ ]]; then
    $1 "${arguments[@]}" &
  else
    $1 "${arguments[@]}"
  fi

  # If the program is not on the list of GUIs (e.g. vim, cat, etc.) bring it
  # to foreground so we can see the output. Also put cd on this list
  # otherwise there will be errors)
  if ! [[ $1 =~ ^(cd|zathura|vlc|eog|kolourpaint)$ ]]; then
    fg %%
  fi

  # ADD A REPEATABLE COMMAND TO THE BASH HISTORY ############################
  # Store the arguments in a temporary file for sanitising before being
  # entered into bash history
  : >/tmp/fzf_tmp
  for file in ${arguments[@]}; do
    echo $file >>/tmp/fzf_tmp
  done

  # Put all input arguments on one line and sanitise the command such that
  # spaces and parentheses are properly escaped. More sanitisation
  # substitutions can be added if needed
  sed -i 's/\n//g; s/ /\\ /g; s/(/\\(/; s/)/\\)/' /tmp/fzf_tmp

  # If the program is on the GUI list add a '&' to the command history
  if [[ $1 =~ ^(zathura|vlc|eog|kolourpaint)$ ]]; then
    sed -i '${s/$/ \&/}' /tmp/fzf_tmp
  fi

  # Grab the sanitised arguments
  arguments=$(cat /tmp/fzf_tmp)

  # Add the command with the sanitised arguments to our .bash_history
  echo ${1} ${arguments} >>~/.bash_history

  # Reload the ~/.bash_history into the shell's active history
  history -r

  # Clean up temporary variables
  rm /tmp/fzf_tmp
}

# Copy selected path to clipboard
pxcopy() {
  path-extractor | fzf | read filename
  [ -n "$filename" ] && echo -n "$filename" | xclip -selection
}

fzf-all() {
  locate '/' | fzf -m | paste -sd=' '
}

fzbuku() {
    # save newline separated string into an array
    mapfile -t website <<< "$(buku -p -f 5 | column -ts$'\t' | fzf --multi)"

    # open each website
    for i in "${website[@]}"; do
        index="$(echo "$i" | awk '{print $1}')"
        buku -p "$index"
        buku -o "$index"
    done
}
